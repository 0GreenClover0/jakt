extern struct FILE {}

extern fun fopen(anon str: raw c_char, anon mode: raw c_char) -> raw FILE
extern fun fgetc(anon file: mut raw FILE) -> c_int
extern fun fclose(anon file: mut raw FILE) -> c_int
extern fun feof(anon file: mut raw FILE) -> c_int
extern fun putchar(anon ch: c_int) -> c_int

fun make_lookup_table() -> [u32] {
    let mut data = [0 as! u32; 256]
    let mut i = 0
    while i < data.size() {
        let mut value = i as! u32
        let mut j = 0
        while j < 8 {
            if value & 1 {
                value = 0xedb88320 as! u32 ^ (value >> 1)
            } else {
                value >>= 1
            }
            ++j
        }

        data[i] = value
        ++i
    }
    return data
}

fun main(args: [String]) {
    if args.size() <= 1 {
        eprintln("usage: crc32 <path>")
        return 1
    }

    let mut file = fopen(args[1].characters(), "r".characters())
    defer fclose(file)

    let table = make_lookup_table()
    
    let mut state: u32 = 0xffffffff
    let mut c = fgetc(file)
    while not feof(file) {
        state = table[(state ^ c) & 0xff] ^ (state >> 8);
        c = fgetc(file)
    }

    let digest = ~state
    println(digest)
}